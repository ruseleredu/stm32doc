"use strict";(self.webpackChunkstm_32_doc=self.webpackChunkstm_32_doc||[]).push([[7484],{8601:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"software/stm32cubemon/stm32cubemonstnodes","title":"ST Nodes","description":"Monitoring tool to test STM32 applications at run-time.","source":"@site/docs/software/stm32cubemon/STnodes.md","sourceDirName":"software/stm32cubemon","slug":"/stm32cubemonstnodes","permalink":"/stm32doc/docs/stm32cubemonstnodes","draft":false,"unlisted":false,"editUrl":"https://github.com/ruseleredu/stm32doc/edit/main/docs/software/stm32cubemon/STnodes.md","tags":[],"version":"current","frontMatter":{"id":"stm32cubemonstnodes","title":"ST Nodes","description":"Monitoring tool to test STM32 applications at run-time.","slug":"/stm32cubemonstnodes"},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/stm32doc/docs/stm32cubemonintro"},"next":{"title":"YouTube Videos","permalink":"/stm32doc/docs/stm32cubemonvideos"}}');var n=s(74848),i=s(28453);const d={id:"stm32cubemonstnodes",title:"ST Nodes",description:"Monitoring tool to test STM32 applications at run-time.",slug:"/stm32cubemonstnodes"},r=void 0,c={},a=[{value:"List of specific ST nodes",id:"list-of-specific-st-nodes",level:2},{value:"Design nodes",id:"design-nodes",level:2},{value:"Acquisition out",id:"acquisition-out",level:3},{value:"Dashboard nodes",id:"dashboard-nodes",level:2}];function l(e){const t={a:"a",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"list-of-specific-st-nodes",children:"List of specific ST nodes"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://wiki.st.com/stm32mcu/wiki/STM32CubeMonitor:List_of_specific_ST_nodes",children:"List of specific ST nodes"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"design-nodes",children:"Design nodes"}),"\n",(0,n.jsx)(t.p,{children:"These nodes are used to create flows from target to variable, rendered in dashboard view. Design nodes are not visible on the dashboard."}),"\n",(0,n.jsx)(t.h3,{id:"acquisition-out",children:"Acquisition out"}),"\n",(0,n.jsx)(t.p,{children:"This allows the user to define and/or select a probe configuration (probe name, protocol and frequency). This node opens and closes the connection, and send commands to the selected probe."}),"\n",(0,n.jsxs)(t.p,{children:["See ",(0,n.jsxs)(t.a,{href:"https://wiki.st.com/stm32mcu/wiki/STM32CubeMonitor:How_to_select_the_target",children:["STM32CubeMonitor",":How"," to select the target"]})," for further details."]}),"\n",(0,n.jsx)(t.h2,{id:"dashboard-nodes",children:"Dashboard nodes"}),"\n",(0,n.jsx)(t.p,{children:"These nodes are visible in dashboard mode; they allow the user to visualize or modify variables used on the target."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>r});var o=s(96540);const n={},i=o.createContext(n);function d(e){const t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);