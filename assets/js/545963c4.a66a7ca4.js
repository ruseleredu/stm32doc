"use strict";(self.webpackChunkstm_32_doc=self.webpackChunkstm_32_doc||[]).push([[3786],{2751:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"getting-started/git-best-practices","title":"Melhores pr\xe1ticas do Git","description":"Melhores pr\xe1ticas do Git","source":"@site/docs/getting-started/git-best-practices.md","sourceDirName":"getting-started","slug":"/git-best-practices","permalink":"/stm32doc/docs/git-best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/ruseleredu/stm32doc/edit/main/docs/getting-started/git-best-practices.md","tags":[],"version":"current","frontMatter":{"id":"git-best-practices","title":"Melhores pr\xe1ticas do Git","description":"Melhores pr\xe1ticas do Git","slug":"/git-best-practices"},"sidebar":"tutorialSidebar","previous":{"title":"Inicio","permalink":"/stm32doc/docs/category/inicio"},"next":{"title":"In\xedcio r\xe1pido da CLI do GitHub","permalink":"/stm32doc/docs/github-cli-cheat-sheet"}}');var n=i(4848),r=i(8453);const a={id:"git-best-practices",title:"Melhores pr\xe1ticas do Git",description:"Melhores pr\xe1ticas do Git",slug:"/git-best-practices"},o=void 0,l={},c=[{value:"Commit Often",id:"commit-often",level:2},{value:"Write Clear Commit Messages",id:"write-clear-commit-messages",level:2},{value:"Use Branches",id:"use-branches",level:2},{value:"Pull Before You Push",id:"pull-before-you-push",level:2},{value:"Review Changes Before Committing",id:"review-changes-before-committing",level:2},{value:"Keep Repositories Small",id:"keep-repositories-small",level:2},{value:"Use .gitignore",id:"use-gitignore",level:2},{value:"Tag Releases",id:"tag-releases",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://www.w3schools.com/git/git_best_practices.asp?remote=github",children:"Git Best Practices"})}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Summary of Git Best Practices"}),"\n",(0,n.jsx)(s.p,{children:"Commit Often\r\nWrite Clear Commit Messages\r\nUse Branches\r\nPull Before You Push\r\nReview Changes Before Committing\r\nKeep Repositories Small\r\nUse .gitignore\r\nTag Releases"}),"\n",(0,n.jsx)(s.h2,{id:"commit-often",children:"Commit Often"}),"\n",(0,n.jsx)(s.p,{children:"Make small, frequent commits to capture your progress."}),"\n",(0,n.jsx)(s.p,{children:"This makes it easier to track changes and find bugs."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:'git add .\r\ngit commit -m "Add user authentication logic"\n'})}),"\n",(0,n.jsx)(s.h2,{id:"write-clear-commit-messages",children:"Write Clear Commit Messages"}),"\n",(0,n.jsx)(s.p,{children:"Use descriptive messages that explain why a change was made, not just what changed."}),"\n",(0,n.jsx)(s.p,{children:"Good commit messages help you and your team understand the history of the project."}),"\n",(0,n.jsx)(s.p,{children:'Be specific: Say what and why, not just "Update" or "Fix".\r\nUse the imperative mood: For example, "Add login validation" instead of "Added login validation".'}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:'git commit -m "Fix bug in user login validation"\n'})}),"\n",(0,n.jsx)(s.h2,{id:"use-branches",children:"Use Branches"}),"\n",(0,n.jsx)(s.p,{children:"Create branches for features, fixes, and experiments to keep your main branch stable."}),"\n",(0,n.jsx)(s.p,{children:"This way, you can work on new ideas without affecting the main codebase."}),"\n",(0,n.jsx)(s.p,{children:"Why? Branches let you test and develop independently, and make collaboration safer.\r\nName branches clearly: For example, feature/login-form or bugfix/user-auth."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"git checkout -b feature/login-form\n"})}),"\n",(0,n.jsx)(s.h2,{id:"pull-before-you-push",children:"Pull Before You Push"}),"\n",(0,n.jsx)(s.p,{children:"Always git pull before pushing."}),"\n",(0,n.jsx)(s.p,{children:"This updates your local branch with changes from others, helps you avoid conflicts, and ensures your push will succeed."}),"\n",(0,n.jsx)(s.p,{children:"Why? If someone else has pushed changes since your last pull, your push may be rejected or cause conflicts."}),"\n",(0,n.jsx)(s.p,{children:"Pulling first lets you fix any issues locally."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"git pull origin main\r\ngit push origin main\n"})}),"\n",(0,n.jsx)(s.h2,{id:"review-changes-before-committing",children:"Review Changes Before Committing"}),"\n",(0,n.jsx)(s.p,{children:"Use git status and git diff to review your changes before you commit."}),"\n",(0,n.jsx)(s.p,{children:"This helps you catch mistakes early."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"git status\r\ngit diff\n"})}),"\n",(0,n.jsx)(s.h2,{id:"keep-repositories-small",children:"Keep Repositories Small"}),"\n",(0,n.jsx)(s.p,{children:"Avoid adding large files or unnecessary dependencies."}),"\n",(0,n.jsx)(s.p,{children:"This keeps your repository fast and easy to clone."}),"\n",(0,n.jsx)(s.p,{children:"Tip: For large files (like videos or datasets), use Git LFS (Large File Storage) instead of adding them directly to your repo."}),"\n",(0,n.jsx)(s.h2,{id:"use-gitignore",children:"Use .gitignore"}),"\n",(0,n.jsx)(s.p,{children:"Exclude files that shouldn't be tracked (like build artifacts, log files, or secrets) by adding them to a .gitignore file."}),"\n",(0,n.jsx)(s.p,{children:"Note: .gitignore only prevents new files from being tracked."}),"\n",(0,n.jsxs)(s.p,{children:["Files already tracked by Git will remain in the repository until you remove them with ",(0,n.jsx)(s.code,{children:"git rm --cached <file>"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"# .gitignore\r\nnode_modules/\r\n*.log\r\n.env\n"})}),"\n",(0,n.jsx)(s.h2,{id:"tag-releases",children:"Tag Releases"}),"\n",(0,n.jsx)(s.p,{children:"Use tags to mark release points (like v1.0) so you can easily find and reference important versions."}),"\n",(0,n.jsx)(s.p,{children:"This helps you keep track of your project's history and make it easier to roll back to previous versions if needed."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"git tag v1.0\r\ngit push origin v1.0\n"})}),"\n",(0,n.jsx)(s.p,{children:"Note: Good Git habits make it easier for your team (and your future self) to understand and build on your work."})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>a,x:()=>o});var t=i(6540);const n={},r=t.createContext(n);function a(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);